survdiff(Surv(timeOUT,death==1)~ADH_LEV,data=data)
HR_12=(115/88.2)/(99/93.4)
HR_12
HR_12=(115/88.2)/(99/93.4)
HR_23=(99/93.4)/(160/122.5)
HR_34=(160/122.5)/(344/413.9)
HR_14=(115/88.2)/(344/413.9)
HR_KM_LEVADH <- c(HR_12,HR_23,HR_34,HR_14)
HR_KM_LEVADH
data$ADERENTE=factor(data$ADERENTE)
data$ADH_LEV= factor(data$ADH_LEV)
# Adherence
KM.ADH <- survfit(Surv(timeOUT,death==1)~ADERENTE,data=data)
summary(KM.ADH)
ggsurvplot(KM.ADH,data=data,conf.int=T,risk.table=TRUE,risk.table.col="strata",
ggtheme = theme_bw(),break.time.by=360,legend.labs=c('Non Aderente','Aderente'),legend.title="Stratified by Adherence",
palette=c('red','green'),title="Kaplan-Meier Curve",pval = T)
# Adherence Levels
KM.ADH_LEV <- survfit(Surv(timeOUT,death==1)~ADH_LEV,data=data)
summary(KM.ADH)
ggsurvplot(KM.ADH_LEV,data=data,conf.int=T,risk.table=TRUE,risk.table.col="strata",
ggtheme = theme_bw(),break.time.by=360,legend.labs=c('level 1','level 2','level 3','level 4'),legend.title="Stratified by Adherence Levels",
palette='heat',title="Kaplan-Meier Curve")
survdiff(Surv(timeOUT,death==1)~ADH_LEV,data=data)
HR_12=(115/88.2)/(99/93.4)
HR_23=(99/93.4)/(160/122.5)
HR_34=(160/122.5)/(344/413.9)
HR_14=(115/88.2)/(344/413.9)
HR_KM_LEVADH <- c(HR_12,HR_23,HR_34,HR_14)
HR_KM_LEVADH
levels(data$ADH_LEV)
## COX PH
cox.mod <- coxph(Surv(timeOUT,death)~SESSO + eta_Min + ADERENTE + tot_hosp + comorbidity,data=data)
summary(cox.mod)
x11()
ggforest(cox.mod,data=data)
# Baseline Hazard
x11()
plot(survfit(cox.mod,data=data))
plot(survfit(cox.mod,data=data),col = 'grey',xlab = "time",ylab = "Baseline Survival Function")
plot(survfit(cox.mod,data=data),col = 'grey',xlab = "time",ylab = "Probability")
# Sex effect
sex_df <-with(data,
data.frame(SESSO=c('M','F'),
eta_Min=rep(median(data$eta_Min,na.rm=T),3),
ADERENTE=rep(TRUE,3),
tot_hosp=rep(median(data$tot_hosp, na.rm=T),3),
comorbidity=rep(median(data$comorbidity,na.rm = T),3)))
cox_sex <- survfit(mod.cox,newdata=sex_df)
# Sex effect
sex_df <-with(data,
data.frame(SESSO=c('M','F'),
eta_Min=rep(median(data$eta_Min,na.rm=T),2),
ADERENTE=rep(TRUE,2),
tot_hosp=rep(median(data$tot_hosp, na.rm=T),2),
comorbidity=rep(median(data$comorbidity,na.rm = T),2)))
cox_sex <- survfit(mod.cox,newdata=sex_df)
cox_sex <- survfit(cox.mod,newdata=sex_df)
# Sex effect
sex_df <-with(data,
data.frame(SESSO=c('M','F'),
eta_Min=rep(median(data$eta_Min,na.rm=T),2),
ADERENTE=rep(median(data$ADERENTE,na.rm=T),2),
tot_hosp=rep(median(data$tot_hosp, na.rm=T),2),
comorbidity=rep(median(data$comorbidity,na.rm = T),2)))
# Sex effect
sex_df <-with(data,
data.frame(SESSO=c('M','F'),
eta_Min=rep(median(data$eta_Min,na.rm=T),2),
ADERENTE=rep(mode(data$ADERENTE,na.rm=T),2),
tot_hosp=rep(median(data$tot_hosp, na.rm=T),2),
comorbidity=rep(median(data$comorbidity,na.rm = T),2)))
ADERENTE=rep(mode(data$ADERENTE),2)
rm(ADERENTE)
rep(mode(data$ADERENTE),2)
table(data$ADERENTE)
is(data$ADERENTE)
# Sex effect
sex_df <-with(data,
data.frame(SESSO=c('M','F'),
eta_Min=rep(median(data$eta_Min,na.rm=T),2),
ADERENTE=factor(rep(1,2)),
tot_hosp=rep(median(data$tot_hosp, na.rm=T),2),
comorbidity=rep(median(data$comorbidity,na.rm = T),2)))
cox_sex <- survfit(cox.mod,newdata=sex_df)
x11()
plot(cox_sex,conf.int=T)
plot(cox_sex,conf.int=T,col = 'heat')
plot(cox_sex,conf.int=T,palette = 'heat')
plot(cox_sex,conf.int=T,col=c('dodgerblue2','orchid2'))
# Diagnostics
x11()
ggcoxdiagnostics(cox.mod,type='martingale')
ggcoxdiagnostics(cox.mod, type='deviance')
ggcoxdiagnostics(cox.mod,type='martingale')
################################  FRAILTY MODEL ###########################################
## Load packages
rm(list = ls())
library(data.table)
library(survival)
library(survminer)
library(coxme)
install.packages("coxme")
install.packages('coxme')
require(coxme)
install.packages("coxme")
install.packages(ggploy)
install.packages(ggplot)
install.packages('ggplot')
################################ COX MIXED EFFECT MODEL ###########################################
## Load packages
rm(list = ls())
library(data.table)
library(survival)
library(survminer)
library(coxme)
## Load Dataset
load("With_Adherence_Dataset/ACE_Inhibitors.RData")
## Arrange Dataset
# histogram
per_hist=new[is.na(hosp)==F,max(hosp),by=COD_REG]
hist(per_hist$V1)
# time at hospitalization events
new[!is.na(hosp), timeEvent:= data_prest - data_rif_ev]
# eta at hospitalization events
new[!is.na(hosp), etaEvent:= eta_Min]
# numbers of comorbidity at hospitalization events discharge
new[!is.na(hosp), comorbidity:=rowSums(.SD), .SDcols = 36:55]
# flag for event
new[!is.na(hosp), event:= 1]
# flag for type of censoring
new[!is.na(hosp), cens:=NA]
## build dataset
# key: COD_REG
# flag: event
# time: timeEvent
# patient level: SESSO, ADERENTE
# event level: eta_event, comorbidity
data <- subset(new,hosp>=1,select = c(COD_REG,event,timeEvent,SESSO,ADERENTE,etaEvent,comorbidity,cens))
names(data)
# add censoring event per patient
codici<- unique(data$COD_REG)
for(i in 1:length(codici)){
paz_corrente <- codici[i]
temp <- data.frame(paz_corrente,0,unique(new[COD_REG==paz_corrente]$timeOUT),unique(new[COD_REG==paz_corrente]$SESSO),
unique(new[COD_REG==paz_corrente]$ADERENTE),
min(new[COD_REG==paz_corrente]$eta_Min) +
as.integer(format(unique(new[COD_REG==paz_corrente]$data_studio_out), format="%Y")) -
as.integer(format(unique(new[COD_REG==paz_corrente]$data_rif_ev), format="%Y")),
tail(data[COD_REG==paz_corrente]$comorbidity,n=1),unique(new[COD_REG==paz_corrente]$death))
names(temp) <- names(data)
attributes(temp$timeEvent)<-attributes(data$timeEvent)
data <- rbind(data,temp)
}
# sort data
data <- data[order(COD_REG),]
## Arrange variables
data$COD_REG= factor(data$COD_REG)
data$status = factor('na')
for( i in 1:dim(data)[1]){
if(data[i]$event==1)
data[i]$status="hospitalization"
else {
if(data[i]$cens==0)
data[i]$status="censored"
else
data[i]$status="dead"
}
}
data$ADERENTE=factor(data$ADERENTE)
## Plot: multiple events & death as non-informative censoring
data_head=data[1:15,]
data_head$time_y=data_head$timeEvent/365
data_head$event=factor(data_head$event, labels=c('terminal','recurrent'))
ggplot(data=data_head,aes(x=COD_REG,y=as.double(time_y),group=COD_REG)) +
geom_line()+
geom_point(aes(color=event,shape=status),size=3)+
xlab("ID")+
ylab("years")+
coord_flip()
## Pass to gap times between events
data[,GapEvent:=as.integer(timeEvent)-as.integer(shift(timeEvent)),by=COD_REG]
data<-data[!is.na(GapEvent)]
## COXME model
coxme.mod <- coxme(Surv(GapEvent,event) ~ SESSO + ADERENTE + etaEvent + comorbidity + (1|COD_REG), data = data)
coxme.mod
######################## JOINT FRAILTY MODEL by Rondeau,2007 ###################################
## Load packages
rm(list = ls())
library(data.table)
library(survival)
library(survminer)
library(frailtypack)
## Load Dataset
load("With_Adherence_Dataset/ACE_Inhibitors.RData")
## Arrange Dataset
# time at hospitalization events
new[!is.na(hosp), timeEvent:= data_prest - data_rif_ev]
# eta at hospitalization events
new[!is.na(hosp), etaEvent:= eta_Min]
# numbers of comorbidity at hospitalization events discharge
new[!is.na(hosp), comorbidity:=rowSums(.SD), .SDcols = 36:55]
# flag for event
new[!is.na(hosp), event:= 1]
# flag for type of censoring
new[!is.na(hosp), cens:=NA]
## build dataset
# key: COD_REG
# flag: event
# time: timeEvent
# patient level: SESSO, ADERENTE
# event level: eta_event, comorbidity
data <- subset(new,hosp>=1,select = c(COD_REG,event,timeEvent,SESSO,ADERENTE,etaEvent,comorbidity,cens))
names(data)
# add censoring event per patient
codici<- unique(data$COD_REG)
for(i in 1:length(codici)){
paz_corrente <- codici[i]
temp <- data.frame(paz_corrente,0,unique(new[COD_REG==paz_corrente]$timeOUT),unique(new[COD_REG==paz_corrente]$SESSO),
unique(new[COD_REG==paz_corrente]$ADERENTE),
min(new[COD_REG==paz_corrente]$eta_Min) +
as.integer(format(unique(new[COD_REG==paz_corrente]$data_studio_out), format="%Y")) -
as.integer(format(unique(new[COD_REG==paz_corrente]$data_rif_ev), format="%Y")),
tail(data[COD_REG==paz_corrente]$comorbidity,n=1),unique(new[COD_REG==paz_corrente]$death))
names(temp) <- names(data)
attributes(temp$timeEvent)<-attributes(data$timeEvent)
data <- rbind(data,temp)
}
# sort data
data <- data[order(COD_REG),]
## Arrange variables
data$COD_REG= factor(data$COD_REG)
data$status = factor('na')
for( i in 1:dim(data)[1]){
if(data[i]$event==1)
data[i]$status="hospitalization"
else {
if(data[i]$cens==0)
data[i]$status="censored"
else
data[i]$status="dead"
}
}
data$ADERENTE=factor(data$ADERENTE)
## Pass to gap times between events
data[,GapEvent:=as.integer(timeEvent)-as.integer(shift(timeEvent)),by=COD_REG]
data<-data[!is.na(GapEvent)]
rm(new)
rm(temp)
gc()
loadedNamespaces()
######################## JOINT FRAILTY MODEL by Rondeau,2007 ###################################
## Load packages
rm(list = ls())
library(data.table)
library(survival)
library(survminer)
library(frailtypack)
## Load Dataset
load("With_Adherence_Dataset/ACE_Inhibitors.RData")
## Arrange Dataset
# time at hospitalization events
new[!is.na(hosp), timeEvent:= data_prest - data_rif_ev]
# eta at hospitalization events
new[!is.na(hosp), etaEvent:= eta_Min]
# numbers of comorbidity at hospitalization events discharge
new[!is.na(hosp), comorbidity:=rowSums(.SD), .SDcols = 36:55]
# flag for event
new[!is.na(hosp), event:= 1]
# flag for type of censoring
new[!is.na(hosp), cens:=NA]
## build dataset
# key: COD_REG
# flag: event
# time: timeEvent
# patient level: SESSO, ADERENTE
# event level: eta_event, comorbidity
data <- subset(new,hosp>=1,select = c(COD_REG,event,timeEvent,SESSO,ADERENTE,etaEvent,comorbidity,cens))
names(data)
# add censoring event per patient
codici<- unique(data$COD_REG)
for(i in 1:length(codici)){
paz_corrente <- codici[i]
temp <- data.frame(paz_corrente,0,unique(new[COD_REG==paz_corrente]$timeOUT),unique(new[COD_REG==paz_corrente]$SESSO),
unique(new[COD_REG==paz_corrente]$ADERENTE),
min(new[COD_REG==paz_corrente]$eta_Min) +
as.integer(format(unique(new[COD_REG==paz_corrente]$data_studio_out), format="%Y")) -
as.integer(format(unique(new[COD_REG==paz_corrente]$data_rif_ev), format="%Y")),
tail(data[COD_REG==paz_corrente]$comorbidity,n=1),unique(new[COD_REG==paz_corrente]$death))
names(temp) <- names(data)
attributes(temp$timeEvent)<-attributes(data$timeEvent)
data <- rbind(data,temp)
}
# sort data
data <- data[order(COD_REG),]
## Arrange variables
data$COD_REG= factor(data$COD_REG)
data$status = factor('na')
for( i in 1:dim(data)[1]){
if(data[i]$event==1)
data[i]$status="hospitalization"
else {
if(data[i]$cens==0)
data[i]$status="censored"
else
data[i]$status="dead"
}
}
data$ADERENTE=factor(data$ADERENTE)
## Pass to gap times between events
data[,GapEvent:=as.integer(timeEvent)-as.integer(shift(timeEvent)),by=COD_REG]
data<-data[!is.na(GapEvent)]
## remove unused structures
rm(new)
rm(temp)
gc()
gc()
######################## JOINT FRAILTY MODEL by Rondeau,2007 ###################################
## Load packages
rm(list = ls())
library(data.table)
#library(survival)
#library(survminer)
library(frailtypack)
## Load Dataset
load("With_Adherence_Dataset/ACE_Inhibitors.RData")
## Arrange Dataset
# time at hospitalization events
new[!is.na(hosp), timeEvent:= data_prest - data_rif_ev]
# eta at hospitalization events
new[!is.na(hosp), etaEvent:= eta_Min]
# numbers of comorbidity at hospitalization events discharge
new[!is.na(hosp), comorbidity:=rowSums(.SD), .SDcols = 36:55]
# flag for event
new[!is.na(hosp), event:= 1]
# flag for type of censoring
new[!is.na(hosp), cens:=NA]
## build dataset
# key: COD_REG
# flag: event
# time: timeEvent
# patient level: SESSO, ADERENTE
# event level: eta_event, comorbidity
data <- subset(new,hosp>=1,select = c(COD_REG,event,timeEvent,SESSO,ADERENTE,etaEvent,comorbidity,cens))
names(data)
# add censoring event per patient
codici<- unique(data$COD_REG)
for(i in 1:length(codici)){
paz_corrente <- codici[i]
temp <- data.frame(paz_corrente,0,unique(new[COD_REG==paz_corrente]$timeOUT),unique(new[COD_REG==paz_corrente]$SESSO),
unique(new[COD_REG==paz_corrente]$ADERENTE),
min(new[COD_REG==paz_corrente]$eta_Min) +
as.integer(format(unique(new[COD_REG==paz_corrente]$data_studio_out), format="%Y")) -
as.integer(format(unique(new[COD_REG==paz_corrente]$data_rif_ev), format="%Y")),
tail(data[COD_REG==paz_corrente]$comorbidity,n=1),unique(new[COD_REG==paz_corrente]$death))
names(temp) <- names(data)
attributes(temp$timeEvent)<-attributes(data$timeEvent)
data <- rbind(data,temp)
}
# sort data
data <- data[order(COD_REG),]
## Arrange variables
data$COD_REG= factor(data$COD_REG)
data$status = factor('na')
for( i in 1:dim(data)[1]){
if(data[i]$event==1)
data[i]$status="hospitalization"
else {
if(data[i]$cens==0)
data[i]$status="censored"
else
data[i]$status="dead"
}
}
data$ADERENTE=factor(data$ADERENTE)
## Pass to gap times between events
data[,GapEvent:=as.integer(timeEvent)-as.integer(shift(timeEvent)),by=COD_REG]
data<-data[!is.na(GapEvent) & GapEvent!=0]
# Note: double recordings of same event cause the FrailtyPenal to crash (gapEvent == 0)
## remove unused structures
rm(new)
rm(temp)
gc()
## Cox Model via frailtypack (penalized MLE) -- Hospitalization
mod.cox.gap <- frailtyPenal(Surv(GapEvent,event)~ SESSO + ADERENTE +
etaEvent + comorbidity,n.knots=12,kappa=1,data=data,
cross.validation = TRUE)
print(mod.cox.gap)
summary(mod.cox.gap)
## Cox Model with random effect -- Hospitalization
mod.cox.gap.shared <- frailtyPenal(Surv(GapEvent,event)~ cluster(COD_REG) + SESSO + ADERENTE +
etaEvent + comorbidity,n.knots=12,kappa=1,data=data,
cross.validation = TRUE)
print(mod.cox.gap.shared)
summary(mod.cox.gap.shared)
## Cox Model with random effect -- Death
data.death <- data[!is.na(cens)]
mod.cox.death.shared <- frailtyPenal(Surv(GapEvent,cens)~ cluster(COD_REG) + SESSO + ADERENTE +
etaEvent + comorbidity,n.knots=10,kappa=1e12,data=data.death,
cross.validation = TRUE)
print(mod.cox.death.shared)
summary(mod.cox.death.shared)
## smoothing parameters
kappa1 <- mod.cox.gap.shared$kappa
kappa2 <- mod.cox.death.shared$kappa
## Joint frailty -- Gamma
data[is.na(cens)]$cens=0
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(cens),formula.terminalEvent=~SESSO+ADERENTE,
data=data,n.knots=10,kappa=c(kappa1,kappa2))
data("readmission")
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
is(readmission$death)
is(data$cens)
attributes(readmission$death)
attr(readmission$death)
help("terminal")
is.numeric(data$cens)
readmission
View(readmission)
table(data$cens)
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(data$cens),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(cens),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
terminal(as.numeric(cens),formula.terminalEvent=~SESSO+ADERENTE,
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(as.numeric(cens)),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
djnc
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(as.numeric(cens)),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(as.integer(cens)),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
names(data$cens)
??is
help(is)
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(as.double(cens)),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
rbinom(3,1,0.3)
help(rbinom)
rbinom(861,0.1)
rbinom(861,861,0.1)
rbinom(861,1,0.1)
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(rbinom(861,1,0.1)),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
is(readmission$death)
data[cens==1 & event == 1]
readmission[death==1 & event == 1]
names(readmission)
readmission[death == 1 & event == 1]
which[readmission$death==1 & readmission$event==1]
readmissino[readmission$death==1 & readmission$event==1]
readmission[readmission$death==1 & readmission$event==1]
View(readmission)
readmission[death==0]
readmission[deaths==0]
readmission[is.na(death)]
readmission[is.na(readmission$death)]
readmission[readmission$death==0]
readmission$death
names(readmission)
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+comorbodity+etaEvent+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE+comorbodity+etaEvent,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+comorbidity+etaEvent+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE+comorbidity+etaEvent,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+comorbidity+etaEvent+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
is(data$comorbidity)
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+comorbidity+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+etaEvent+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+etaEvent+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
mod.cox.death.shared <- frailtyPenal(Surv(GapEvent,cens)~ cluster(COD_REG) + SESSO + ADERENTE +
etaEvent + comorbidity,n.knots=10,kappa=1e12,data=data.death,
cross.validation = TRUE)
## Cox Model with random effect -- Hospitalization
mod.cox.gap.shared <- frailtyPenal(Surv(GapEvent,event)~ cluster(COD_REG) + SESSO + ADERENTE +
etaEvent + comorbidity,n.knots=12,kappa=1,data=data,
cross.validation = TRUE)
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE+etaEvent,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
rm(modJoint.gap)
modJoint.gap <- frailtyPenal(Surv(GapEvent,event)~cluster(COD_REG)+SESSO+ADERENTE+
terminal(readmission$death),formula.terminalEvent=~SESSO+ADERENTE+etaEvent,
data=data[1:861,],n.knots=10,kappa=c(kappa1,kappa2))
